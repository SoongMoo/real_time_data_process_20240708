<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 	
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="springBootMVCShopping.mapper.GoodsMapper">
<sql id="goodsColumnsBase">
	   goods_Num , goods_name , goods_price ,goods_contents , emp_num  
	  ,goods_regist , GOODS_MAIN_IMAGE ,GOODS_MAIN_STORE_IMAGE 
	  , GOODS_DETAIL_IMAGE ,GOODS_DETAIL_STORE_IMAGE 
	  , visit_count ,update_Emp_Num , goods_Update_Date
</sql>
<insert id="goodsInsert" parameterType="goods">
insert into goods ( <include refid="goodsColumnsBase" /> )
values(#{goodsNum}, #{goodsName}, #{goodsPrice}, #{goodsContents}
		,#{empNum}, sysdate, 
		#{goodsMainImage}, #{goodsMainStoreImage},
		<if test="goodsDetailImage != null">
		#{goodsDetailImage},#{goodsDetailStoreImage},
		</if>
		<if test="goodsDetailImage == null">
		null,null,
		</if>
		0,null,null)
</insert>

<!-- dto에 직접 넣어 가지고 오는 것이 아니라 setter를 이용해서 가져오겠습니다. -->
<resultMap type="goods" id="goodsResultMap">
	<constructor>
		<idArg column="goods_Num" jdbcType="VARCHAR" javaType="string"/>
		<arg column="goods_Name" jdbcType="VARCHAR" javaType="string" />
		<arg column="GOODS_PRICE" jdbcType="BIGINT" javaType="integer" />
		<arg column="goods_Contents" javaType="string" jdbcType="VARCHAR" />
		<arg column="emp_Num" javaType="string" jdbcType="VARCHAR" />
		<arg column="visit_Count" javaType="integer" jdbcType="BIGINT" />
		<arg column="goods_Regist" javaType="java.util.Date" jdbcType="DATE" />
		<arg column="update_Emp_Num" javaType="string" jdbcType="VARCHAR" />
		<arg column="goods_Update_Date" javaType="java.util.Date" jdbcType="DATE" />
		<arg column="GOODS_MAIN_IMAGE" javaType="string" jdbcType="VARCHAR" />
		<arg column="GOODS_MAIN_STORE_IMAGE" javaType="string" jdbcType="VARCHAR" />
		<arg column="GOODS_DETAIL_IMAGE" javaType="string" jdbcType="VARCHAR" />
		<arg column="GOODS_DETAIL_STORE_IMAGE" javaType="string" jdbcType="VARCHAR" />		
	</constructor>
</resultMap>
<select id="allSelect" resultMap="goodsResultMap">
select * from (
	select ROW_NUMBER() over (order by goods_num desc) as rn,
			<include refid="goodsColumnsBase" />
	from goods
	<where>
		<if test="searchWord != null">
			goods_name like '%' || #{searchWord} || '%'
			or goods_num like '%' || #{searchWord} || '%'
		</if>
	</where>
)
where rn between #{startRow}  and #{endRow}
</select>
<select id="goodsCount" parameterType="string" resultType="integer">
	select count(*) from goods
	<where>
		<if test="searchWord != null">
			goods_name like '%' || #{searchWord} || '%'
			or goods_num like '%' || #{searchWord} || '%'
		</if>
	</where>
</select>
<delete id="productsDelete" parameterType="string">
delete from goods <!-- foreach문을 사용해서 in연산자를 사용합니다. -->
where goods_num in <foreach collection="products" item="goodsNum" open="(" close=")" index="index"
					separator=",">
						#{goodsNum}
					</foreach>
</delete>

<select id="selectOne" parameterType="string" resultMap="goodsResultMap">
select <include refid="goodsColumnsBase" />
from goods  
where goods_Num = #{goodsNum}
</select>
<update id="goodsUpdate" parameterType="goods"> 
update goods
<trim prefix="set" suffixOverrides=",">
	 GOODS_NAME = #{goodsName}, GOODS_PRICE = #{goodsPrice}
	,GOODS_CONTENTs = #{goodsContents}
    ,update_emp_num = #{updateEmpNum}, goods_update_date = sysdate
    <if test="goodsMainImage != null">
    ,GOODS_MAIN_IMAGE = #{goodsMainImage}
    ,GOODS_MAIN_STORE_IMAGE = #{goodsMainStoreImage}
    </if>
    <if test="goodsDetailImage != null ">
    ,GOODS_DETAIL_IMAGE = #{goodsDetailImage}
    ,GOODS_DETAIL_STORE_IMAGE = #{goodsDetailStoreImage}
    </if>
</trim>
where goods_num = #{goodsNum}
</update>
<delete id="goodsDelete" parameterType="string">
delete from goods
where goods_num = #{goodsNum}
</delete>

<select id="goodsSelectList" resultMap="goodsResultMap">
select * from (
	select ROW_NUMBER() over (order by goods_num desc) as rn
		, goods_Num , goods_name , goods_price ,goods_contents , emp_num,goods_regist , GOODS_MAIN_IMAGE 
		,GOODS_MAIN_STORE_IMAGE , GOODS_DETAIL_IMAGE ,GOODS_DETAIL_STORE_IMAGE , visit_count 
		,update_Emp_Num , goods_Update_Date
	from goods
)
where rn between #{startRow} and #{endRow}
</select>
</mapper>
<!-- nvl <====> ifnull ====> COALESCE(column, 0) -->









