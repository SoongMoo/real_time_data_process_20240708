---- 다중행 함수 : 그룹함수 : null포함하지 읺는다.

--- 급여에서 급여를 많이 받는 직원과 급여가 제일 적은 직원, 그리고 한달 급여의 평균과
--- 한달 동안 지급되는 급여의 금액을 출력하세요.
SELECT max(salary), min(salary), round(avg(salary),5), sum(salary)
FROM hr.employees;

-- 전체 직원의 수 
select count(employee_id), count(last_name), count(email), count(hire_Date),
    -- , count(first_name) , count( PHONE_NUMBER), count(SALARY)
    -- , count(COMMISSION_PCT), count(MANAGER_ID), count(DEPARTMENT_ID)
     count(DEPARTMENT_ID)
from hr.employees;
--- 커미션을 받는 사원의 수 
select * from hr.employees;
select count(commission_pct) from hr.employees;
-- 부서가 있는 사원의 수
select count(department_id) from hr.employees;
-- 부서가 없는 사원의 수
select * from hr.employees where department_id is null;
select count(*) from hr.employees where department_id is null;

-- 80인 부서의 직원 수와 최대 급여와 최소급여를 구하시오.
select * from hr.employees where department_id = 80;
select count(*), max(salary), min(salary)  from hr.employees where department_id = 80;
-- 그룹함수에서는 컬럼을 같이 사용할 수 없다.

--- 부서를 출력하세요
select department_id from hr.employees;
--- 부서를 하번씩만 출력하시오.
select DISTINCT department_id from hr.employees; 
--- 부서의 수를 출력하시오.
select  count(DISTINCT department_id) from hr.employees;

-- 직무가 RE를 포함한 직원을 출력하시오.
SELECT * from hr.employees where job_id like '%RE%';
-- 직무가 RE를 포함한 직원의 최대 급여와 최소 급여 그리고 직원의 수와 평균급여를 출력하시오.
SELECT max(salary) , min(salary), count(*) , round(avg(salary),3) from hr.employees 
where job_id like '%RE%';

--- 제일 먼저 입사한 사원과 제일 나중에 입사한 사원 입사일을 출력하세요.
select min(hire_date), max(hire_date) from hr.employees;

--- 80인 부서에서 커미션만 출력하시오.
select commission_pct from hr.employees
where department_id = 80;

-- 사원 수, 커미션을 받는 사원 수 
select count(commission_pct) from hr.employees
where department_id = 80;

--- commission_pct의 전체의 평균을 구하시오, 
--- commission_pct을 받는 사원의 commission_pct의의 평균을 구하시오.
select commission_pct from hr.employees;
select nvl(commission_pct, 0) from hr.employees;
select avg(nvl(commission_pct, 0)) from hr.employees; -- 전체 커미션 평균
--- 커미션을 받는 직원의 커미션의 평균을 구하는 식
select avg(commission_pct), sum(commission_pct)/ count(commission_pct)
from hr.employees;
-- 전체 직원의 평균을 구하는 식
select sum(commission_pct) / count(*), avg(nvl(commission_pct, 0))
from hr.employees;
--- 그룹함수는 null을 연산하지 않으므로 null이 있는 경우 그룹함수의 값이 달라질 수 있다.

-- 80인 부서에서 직무가 'SA_MAN'인 사원의 수와 커미션의 평균을 구하시오
select * from hr.employees where department_id = 80 and job_id = 'SA_MAN';
select count(*), avg(commission_pct) from hr.employees 
where department_id = 80 and job_id = 'SA_MAN';

select *  from hr.employees;
--- 80인 부서의 급여의 평균, 급여의 합계, 최대 급여, 최소 급여
select avg(salary), sum(salary), max(salary), min(salary)
from hr.employees where department_id = 80;
--- 90인 부서의 급여의 평균, 급여의 합계, 최대 급여, 최소 급여
select avg(salary), sum(salary), max(salary), min(salary)
from hr.employees where department_id = 90;
--- 70인 부서의 급여의 평균, 급여의 합계, 최대 급여, 최소 급여
select avg(salary), sum(salary), max(salary), min(salary)
from hr.employees where department_id = 70;


--- group by
select department_id, avg(salary), sum(salary), max(salary), min(salary)
from hr.employees
where department_id in (90,80,70)
group by department_id;

select * from hr.employees
order by job_id asc;

-- job_id 가 FI_ACCOUNT인 지원의 급여의 평균, 급여의 합계, 최대값 , 최소값, 직원수를 출력
-- job_id 가 IT_PROG인 지원의 급여의 평균, 급여의 합계, 최대값 , 최소값, 직원수를 출력
-- job_id 가 PU_CLERK인 지원의 급여의 평균, 급여의 합계, 최대값 , 최소값, 직원수를 출력
select job_id, sum(salary), avg(salary), min(salary), max(salary), count(*)
from hr.employees
where job_id in ('FI_ACCOUNT', 'IT_PROG', 'PU_CLERK')
group by job_id;

--- 직원들의 모든 정보를 출력할 때 부서를 오름차순으로 정렬하고 
--- 정렬된 깉은 부서안에서 다른 직무하는 직원이 있다면 직무를 오름차순으로 정렬
select * from hr.employees 
order by department_id, job_id;

--- 같은 부서의 다른 직무들의 급여의 평균, 급여의 합계, 최대값, 최소값
--- 같은 부서에서 같은 직무를 하는 직원의 수를 출력하시오.
select department_id , job_id
      ,sum(salary), avg(salary), max(salary), min(salary), count(*)
from hr.employees
group by department_id , job_id
order by department_id, job_id;
--- group by절에 있는 컬럼들은 select절에 사용할 수 있다.

--- 부서별 평균급여를 출력하세요
select department_id, avg(salary)
from hr.employees
group by department_id;
-- 이 때 평균급여가 8000을 초과한 부서와 평균급여는 ?
select department_id, avg(salary)
from hr.employees  --- 1
-- where avg(salary) > 8000 는 안됨 -- 2
group by department_id   -- 3
having avg(salary) > 8000 --  그룹함수를 조건으로 사용한다.
order by department_id;
-- 그룹함수는 where절에 사용할 수 없다.
-- 그룹함수는  group by 다음에 실해되므로 group by 이전에 실행되는 where절에서 사용하지
-- 못한다.

---  직무별 최대급여 , 최소급여, 급여의 합계, 직원수를 출력할 때 
---  직무별 직원의 수가 3이상은 것만 출력하시오.
select job_id, max(salary) , min(salary), sum(salary), count(*)
from hr.employees
group by job_id
having count(*) >= 3;

-- REP를 포함하고 있지 않은 직무들중에서 각 직무별 최대 급여, 최소급여, 급여합계를 출력하세요.
-- 이때 급여합계가 13000이상인 것만 출력하시오.
-- 단, 급여의 합계가 많은 것부터 출력.
--       1        2            3             4          5
select job_id, min(salary), max(salary), sum(salary), count(*)
from hr.employees
where job_id not like '%REP%'
group by job_id 
having sum(salary) >= 13000
order by 4 desc; -- sum(salary) desc;
-- 각 부서별 부서의 급여의 합계, 최대, 최소, 사원의 수, 평균을 출력하는데 평균은 
-- 소수점 2자리만 출력
select department_id, min(salary), max(salary), sum(salary), count(*)
       ,round(avg(salary),2)
from hr.employees
group by department_id;
-- 부서에서 같은 직무를 하는 사원들의 최대 급여, 최소 급여, 
-- 평균급여 급여의 합계와 같은 직무를 하는 사원의 수를 출력
select department_id, job_id, min(salary), max(salary), sum(salary), count(*)
from hr.employees
group by department_id, job_id
order by department_id, job_id ;
-- 각부서에서 직무가 같은 사원들 중 입사일이 같은 사원의 수를 구하시오.
-- 사원수가 2명이상만 출력
-- 단, 80인 부서만 출력
select department_id, job_id, hire_date, count(*)
from hr.employees
where department_id = 80
group by department_id, job_id, hire_date
having count(*) >= 2
order by department_id, job_id, hire_date ;
--- 평균급여가 7000이상인 부서만 출력하시오.평균 급여가 높은 것 부터 출력하시오.
select department_id, avg(salary)
from hr.employees
group by department_id
having avg(salary) >= 7000
order by avg(salary) desc;
-- 각 부서의 평균급여 중 최대 평균급여를 출력하시오.
select  max(avg(salary)) from hr.employees
group by department_id;

--- 조인 : 두개 이상의 테이블로부터 데이터 가져오는 것
select * from hr.employees;
select * from hr.departments;
--- T-SQL join
--- 사원번호, 이름, 급여, 직무, 부서번호, 부서명
select employee_id, first_name, salary, job_id, hr.employees.department_id 
      ,department_name
from hr.employees , hr.departments
where hr.employees.department_id = hr.departments.department_id;

select * from hr.employees;
select * from hr.jobs;

--- 사원번호, 이름 , 급여 , 직무 번호, 부서번호 , 직무명
select employee_id, first_name, salary, department_id
      , hr.jobs.job_id, job_title
from hr.employees , hr.jobs
where hr.employees.job_id = hr.jobs.job_id;

select * from hr.departments;
select * from hr.employees;
-- 사원번호 , 이름, 급여, 직무 , 부서번호, 부서명
select employee_id, first_name, salary, job_id
     , d.department_id, department_name, d.manager_id
from hr.employees e, hr.departments d
where e.employee_id = d.manager_id;

select * from hr.departments;
select * from hr.locations;
--- 부서번호, 부서명, 주소번호, 주소명,우편번호
select department_id, department_name
     , l.location_id , street_address, postal_code
from hr.departments d, hr.locations l
where d.location_id = l.location_id ;
    
-- ANSI - JOIN
select department_id, department_name
     , l.location_id , street_address, postal_code
from hr.departments d join hr.locations l
on d.location_id = l.location_id;

select employee_id, first_name, salary, job_id
     , d.department_id, department_name, d.manager_id
from hr.employees e join hr.departments d
on e.employee_id = d.manager_id
where employee_id = 100;

select * from hr.employees;
select * from hr.job_history;
--- 사원번호, 이름, 급여, 직무, 부서번호
--- 시작일, 마지막일, 맡은 직무
select e.employee_id, first_name, salary, e.job_id, e.department_id
     , start_date, end_date, jh.job_id
from hr.employees e join hr.job_history jh
on e.employee_id = jh.employee_id;

select * from hr.jobs;
select * from hr.job_history;
select * from hr.departments;
-- 직무명, 최소 급여, 최대급여
-- 직무번호, 시작일, 마친일
-- 부서번호, 부서명
--- T-SQL JOIN
select job_title, min_salary, max_salary 
      ,jh.job_id, start_date, end_date
      ,d.department_id, department_name
from hr.jobs j, hr.job_history jh, hr.departments d
where j.job_id = jh.job_id and jh.department_id = d.department_id;
-- ANSI - JOIN
select job_title, min_salary, max_salary 
      ,jh.job_id, start_date, end_date
      ,d.department_id, department_name
from hr.jobs j join hr.job_history jh
on j.job_id = jh.job_id join  hr.departments d
on jh.department_id = d.department_id;


